library(embed)
install.packages("embed")
library(themis)
library(tidyverse)
library(tidymodels)
library(vroom)
library(ggplot2)
library(dplyr)
library(patchwork)
library(glmnet)
library(embed)
train <- vroom("~/GitHub/Stat 348/Amazon/Data/train.csv")
test <- vroom("~/GitHub/Stat 348/Amazon/Data/test.csv")
ggplot(train, aes(x = factor(ACTION))) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Distribution of Access Actions",
x = "Action (0 = Denied, 1 = Granted)",
y = "Count") +
theme_minimal()
train %>%
count(RESOURCE, sort = TRUE) %>%
slice_head(n = 10) %>%
ggplot(aes(x = reorder(factor(RESOURCE), n), y = n)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(title = "Top 10 Most Common Resources Accessed",
x = "Resource ID",
y = "Number of Requests") +
theme_minimal()
amazon_recipe <- recipe(ACTION ~ ., data = train) %>%
step_targetenc(all_nominal_predictors(), outcome = vars(ACTION))
library(embed)
library(tidyverse)
library(tidymodels)
library(vroom)
library(ggplot2)
library(dplyr)
library(patchwork)
library(glmnet)
library(embed)
train <- vroom("~/GitHub/Stat 348/Amazon/Data/train.csv")
test <- vroom("~/GitHub/Stat 348/Amazon/Data/test.csv")
ggplot(train, aes(x = factor(ACTION))) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Distribution of Access Actions",
x = "Action (0 = Denied, 1 = Granted)",
y = "Count") +
theme_minimal()
train %>%
count(RESOURCE, sort = TRUE) %>%
slice_head(n = 10) %>%
ggplot(aes(x = reorder(factor(RESOURCE), n), y = n)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(title = "Top 10 Most Common Resources Accessed",
x = "Resource ID",
y = "Number of Requests") +
theme_minimal()
amazon_recipe <- recipe(ACTION ~ ., data = train) %>%
step_targetenc(all_nominal_predictors(), outcome = vars(ACTION))
amazon_recipe <- recipe(ACTION ~ ., data = train) %>%
step_targetencode(all_nominal_predictors(), outcome = vars(ACTION))
amazon_recipe <- recipe(ACTION ~ ., data = train) %>%
step_target_encode(all_nominal_predictors(), outcome = vars(ACTION))
amazon_recipe <- recipe(ACTION ~ ., data = train) %>%
step_targetencode(all_nominal_predictors(), outcome = vars(ACTION))
library(tidyverse)
library(tidymodels)
library(vroom)
library(embed)
library(ranger)
train <- vroom("~/GitHub/Stat 348/Amazon/Data/train.csv")
test <- vroom("~/GitHub/Stat 348/Amazon/Data/test.csv")
train <- train %>%
mutate(ACTION = as.factor(ACTION))
amazon_recipe <- recipe(ACTION ~ ., data = train) %>%
step_string2factor(all_nominal_predictors()) %>%
step_other(all_nominal_predictors(), threshold = 0.001) %>%
step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) %>%
step_normalize(all_numeric_predictors()) %>%
step_pca(all_predictors(), threshold=1)
amazon_prep <- prep(amazon_recipe)
amazon_train <- bake(amazon_prep, new_data = NULL)
amazon_test <- bake(amazon_prep, new_data = test)
model <- rand_forest(
mtry = tune(),      # number of predictors randomly sampled at each split
min_n = tune(),     # minimal node size
trees = 1000         # number of trees; can increase to 1000
) %>%
set_engine("ranger") %>%
set_mode("classification")
