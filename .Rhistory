library(embed)
install.packages("embed")
library(themis)
library(tidyverse)
library(tidymodels)
library(vroom)
library(ggplot2)
library(dplyr)
library(patchwork)
library(glmnet)
library(embed)
train <- vroom("~/GitHub/Stat 348/Amazon/Data/train.csv")
test <- vroom("~/GitHub/Stat 348/Amazon/Data/test.csv")
ggplot(train, aes(x = factor(ACTION))) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Distribution of Access Actions",
x = "Action (0 = Denied, 1 = Granted)",
y = "Count") +
theme_minimal()
train %>%
count(RESOURCE, sort = TRUE) %>%
slice_head(n = 10) %>%
ggplot(aes(x = reorder(factor(RESOURCE), n), y = n)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(title = "Top 10 Most Common Resources Accessed",
x = "Resource ID",
y = "Number of Requests") +
theme_minimal()
amazon_recipe <- recipe(ACTION ~ ., data = train) %>%
step_targetenc(all_nominal_predictors(), outcome = vars(ACTION))
library(embed)
library(tidyverse)
library(tidymodels)
library(vroom)
library(ggplot2)
library(dplyr)
library(patchwork)
library(glmnet)
library(embed)
train <- vroom("~/GitHub/Stat 348/Amazon/Data/train.csv")
test <- vroom("~/GitHub/Stat 348/Amazon/Data/test.csv")
ggplot(train, aes(x = factor(ACTION))) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Distribution of Access Actions",
x = "Action (0 = Denied, 1 = Granted)",
y = "Count") +
theme_minimal()
train %>%
count(RESOURCE, sort = TRUE) %>%
slice_head(n = 10) %>%
ggplot(aes(x = reorder(factor(RESOURCE), n), y = n)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(title = "Top 10 Most Common Resources Accessed",
x = "Resource ID",
y = "Number of Requests") +
theme_minimal()
amazon_recipe <- recipe(ACTION ~ ., data = train) %>%
step_targetenc(all_nominal_predictors(), outcome = vars(ACTION))
amazon_recipe <- recipe(ACTION ~ ., data = train) %>%
step_targetencode(all_nominal_predictors(), outcome = vars(ACTION))
amazon_recipe <- recipe(ACTION ~ ., data = train) %>%
step_target_encode(all_nominal_predictors(), outcome = vars(ACTION))
amazon_recipe <- recipe(ACTION ~ ., data = train) %>%
step_targetencode(all_nominal_predictors(), outcome = vars(ACTION))
